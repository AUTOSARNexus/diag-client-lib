digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node76 [label="std::true_type",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node76 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node0 [label="core_type::details\l::is_container_element\l_type_convertible\< F,\l T, typename std::enable\l_if\< std::is_convertible\l\< std::remove_pointer_t\< decltype\l(std::data(std::declval\< F \>())\l)\>(*)[], T(*)[]\>::value \>::type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structcore__type_1_1details_1_1is__container__element__type__convertible_3_01F_00_01T_00_01typend8e342f7f5d49ec87813ec7b40520d32.html",tooltip="Checks if std::remove_pointer_t<decltype(std::data(arr))>(*)[] is convertible to T(*)[]."];
  Node76 -> Node78 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node78 [label="core_type::details\l::is_data_size_valid\l\< T, std::void_t\< decltype\l(std::data(std::declval\<\l T \>())), decltype(std::size\l(std::declval\< T \>()))\> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structcore__type_1_1details_1_1is__data__size__valid_3_01T_00_01std_1_1void__t_3_01decltype_07st0128843b8fbacf73d512eb825bbf4687.html",tooltip="Type trait to check if std::data(cont) and std::size(cont) are both well-formed."];
  Node76 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node79 [label="core_type::details\l::is_span\< Span\< T,\l Extent \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structcore__type_1_1details_1_1is__span_3_01Span_3_01T_00_01Extent_01_4_01_4.html",tooltip="Type trait to check if passed element is Span or not."];
  Node76 -> Node80 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node80 [label="core_type::details\l::is_std_array\< std\l::array\< T, N \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structcore__type_1_1details_1_1is__std__array_3_01std_1_1array_3_01T_00_01N_01_4_01_4.html",tooltip="Type trait to check if passed element is std::array or not."];
}
